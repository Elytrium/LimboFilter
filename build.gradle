//file:noinspection VulnerableLibrariesLocal

plugins() {
  id("java")

  alias(libs.plugins.grgit)
  alias(libs.plugins.buildconfig)

  alias(libs.plugins.shadow)

  alias(libs.plugins.spotless)

  id("checkstyle")
  alias(libs.plugins.spotbugs)
}

this.group = "net.elytrium"
this.version = "2.0.0-SNAPSHOT"

if (this.version.endsWith("-SNAPSHOT")) {
  this.version += " (${grgit.head().abbreviatedId})"
}

tasks.withType(JavaCompile).configureEach() {
  options.setEncoding("UTF-8")
}

java() {
  toolchain.setLanguageVersion(JavaLanguageVersion.of(17))
}

configurations() {
  // TODO remove when checkstyle get fixed
  checkstyle() {
    resolutionStrategy.getCapabilitiesResolution().withCapability("com.google.collections:google-collections") {
      select("com.google.guava:guava:0")
    }
  }
}

repositories() {
  mavenCentral()

  maven() {
    name = "elytrium"
    url = "https://maven.elytrium.net/repo/"
  }

  maven() {
    name = "papermc"
    url = "https://repo.papermc.io/repository/maven-public/"
  }
}

dependencies() {
  annotationProcessor(libs.velocity.api)
  compileOnly(libs.bundles.velocity)

  compileOnly(libs.limboapi)

  implementation(libs.bstats)
  implementation(libs.pcap)
}

buildConfig() {
  packageName("${this.group}.${this.name}")

  buildConfigField("String", "VERSION", "\"${this.version}\"")
}

shadowJar() {
  archiveClassifier = null

  // TODO use buildConfig + LibrariesLoader
  relocate("org.bstats", "net.elytrium.limbofilter.3rdparty.org.bstats")
  relocate("net.elytrium.commons.velocity", "net.elytrium.limboapi.3rdparty.commons.velocity")
  relocate("net.elytrium.commons.kyori", "net.elytrium.limboapi.3rdparty.commons.kyori")
  relocate("net.elytrium.commons.config", "net.elytrium.limboapi.3rdparty.commons.config")
}

spotless() {
  java() {
    licenseHeaderFile(rootProject.file("HEADER.txt"))
    targetExclude("**/BuildConfig.java")
  }
}

checkstyle() {
  toolVersion = libs.versions.checkstyle.get()

  configFile = rootProject.file(".config/checkstyle/checkstyle.xml")
  maxErrors = 0
  maxWarnings = 0
}

checkstyleMain() {
  exclude("**/BuildConfig.java")
}

spotbugsMain() {
  excludeFilter.set(rootProject.file(".config/spotbugs/suppressions.xml"))
  reports.register("html") {
    required = true
    outputLocation.value(layout.buildDirectory.file("reports/spotbugs/spotbugs.html"))
    stylesheet = "fancy-hist.xsl"
  }
}

assemble.dependsOn(shadowJar)
