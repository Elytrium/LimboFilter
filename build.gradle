//file:noinspection GroovyAssignabilityCheck

plugins {
    id("java")
    id("checkstyle")
    id("com.github.spotbugs").version("5.0.6")
    id("org.cadixdev.licenser").version("0.6.1")
    id("com.github.johnrengelman.shadow").version("7.1.2")
}

setGroup("net.elytrium")
setVersion("1.0.6-SNAPSHOT")

compileJava {
    getOptions().setEncoding("UTF-8")
}

java {
    setSourceCompatibility(JavaVersion.VERSION_11)
    setTargetCompatibility(JavaVersion.VERSION_11)
}

repositories {
    mavenCentral()

    maven {
        setName("elytrium-repo")
        setUrl("https://maven.elytrium.net/repo/")
    }
    maven {
        setName("papermc-repo")
        setUrl("https://papermc.io/repo/repository/maven-public/")
    }
}

dependencies {
    compileOnly("net.elytrium:limboapi-api:1.0.6-SNAPSHOT")

    compileOnly("com.velocitypowered:velocity-api:3.1.2-SNAPSHOT")
    annotationProcessor("com.velocitypowered:velocity-api:3.1.2-SNAPSHOT")
    compileOnly("com.velocitypowered:velocity-proxy:3.1.2-SNAPSHOT") // From Elytrium Repo.

    // Needs for some velocity methods.
    compileOnly("io.netty:netty-codec:4.1.77.Final")
    compileOnly("it.unimi.dsi:fastutil-core:8.5.8")
    compileOnly("org.apache.logging.log4j:log4j-api:2.17.2")
    compileOnly("org.apache.logging.log4j:log4j-core:2.17.2")

    implementation("org.bstats:bstats-velocity:3.0.0")
    implementation("redis.clients:jedis:4.2.3")

    compileOnly("com.github.spotbugs:spotbugs-annotations:4.6.0")
}

shadowJar {
    getArchiveClassifier().set("")

    relocate("org.bstats", "net.elytrium.limbofilter.thirdparty.org.bstats")
}

license {
    setHeader(file("HEADER.txt"))
}

checkstyle {
    setToolVersion("10.1")
    setConfigFile(file("${this.getRootDir()}/config/checkstyle/checkstyle.xml"))
    setConfigProperties("configDirectory": "${this.getRootDir()}/config/checkstyle")

    // The build should immediately fail if we have errors.
    setMaxErrors(0)
    setMaxWarnings(0)
}

spotbugsMain {
    setExcludeFilter(file("${this.getRootDir()}/config/spotbugs/suppressions.xml"))

    reports {
        html {
            getRequired().set(true)
            getOutputLocation().set(file("${this.getBuildDir()}/reports/spotbugs/main/spotbugs.html"))
            setStylesheet("fancy-hist.xsl")
        }
    }
}

sourceSets.main.getJava().srcDir(getTasks().register("generateTemplates", Copy) { task ->
    task.getInputs().properties("version": getVersion())

    task.from(file("src/main/templates"))
        .into(getLayout().getBuildDirectory().dir("generated/sources/templates"))
        .expand("version": getVersion())
}.map {
    it.getOutputs()
})

assemble.dependsOn(shadowJar)
